/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/builderFactory.ts":
/*!*******************************!*\
  !*** ./src/builderFactory.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BuilderFactory = void 0;\nclass BuilderFactory {\n    constructor() {\n        this._element = document.getElementById(\"main_menu\");\n    }\n    addBuilder(name, clickCallback) {\n        let builder = document.createElement(\"button\");\n        builder.className = \"main_menu_task\";\n        builder.textContent = name;\n        builder.onclick = clickCallback;\n        this._element.appendChild(builder);\n    }\n}\nexports.BuilderFactory = BuilderFactory;\n\n\n//# sourceURL=webpack://grab_color/./src/builderFactory.ts?");

/***/ }),

/***/ "./src/coordColorList.ts":
/*!*******************************!*\
  !*** ./src/coordColorList.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CoordColorList = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nclass CoordColorList {\n    constructor() {\n        this.listView = document.getElementById(\"coord_color_list\");\n        this.coordColors = Array();\n    }\n    getCoordColors() {\n        return this.coordColors;\n    }\n    appendView(x, y, r, g, b) {\n        let div = document.createElement(\"div\");\n        div.style.height = \"40px\";\n        let coord_color = document.createElement(\"div\");\n        coord_color.className = \"coord_color\";\n        coord_color.style.backgroundColor = (0, utils_1.RGBToStyleColorString)(r, g, b);\n        coord_color.textContent = `${x},${y},${(0, utils_1.RGBTo0xHexString)(r, g, b)}`;\n        coord_color.style.width = \"150px\";\n        coord_color.style.float = \"left\";\n        coord_color.onclick = (e) => {\n            let text = \"\";\n            if (coord_color.textContent) {\n                if (e.offsetX < 50) {\n                    let r = coord_color.textContent.split(\",\");\n                    text = `${r[0]},${r[1]}`;\n                }\n                else if (e.offsetX > 100) {\n                    text = coord_color.textContent.split(\",\")[2];\n                }\n                else {\n                    text = coord_color.textContent;\n                }\n            }\n            (0, utils_1.setClipboard)(text).then(() => {\n                (0, utils_1.showMessage)(`${text}已经复制到你的剪切板`);\n            });\n        };\n        let del = document.createElement(\"button\");\n        del.className = \"coord_color_element\";\n        del.textContent = \"del\";\n        del.onclick = (e) => {\n            this.listView.removeChild(div);\n            for (let index = 0; index < this.coordColors.length; index++) {\n                const element = this.coordColors[index];\n                if (element.x === x && element.y === y) {\n                    this.coordColors.splice(index, 1);\n                    break;\n                }\n            }\n        };\n        div.append(coord_color);\n        div.append(del);\n        this.listView.append(div);\n    }\n    onSelected(x, y, r, g, b) {\n        this.coordColors.push({\n            x: x,\n            y: y,\n            r: r,\n            g: g,\n            b: b\n        });\n        this.appendView(x, y, r, g, b);\n    }\n}\nexports.CoordColorList = CoordColorList;\n\n\n//# sourceURL=webpack://grab_color/./src/coordColorList.ts?");

/***/ }),

/***/ "./src/imageCanvas.ts":
/*!****************************!*\
  !*** ./src/imageCanvas.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImageCanvas = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nclass ImageCanvas {\n    constructor() {\n        this.hasImage = false;\n        this.imageOffsetX = 0;\n        this.imageOffsetY = 0;\n        this.mouseButton = -1;\n        this.mouseCtrl = false;\n        this.mouseDownX = 0;\n        this.mouseDownY = 0;\n        this.maxImageOffsetX = 0;\n        this.maxImageOffsetY = 0;\n        this.mouseLastX = 0;\n        this.mouseLastY = 0;\n        this.canvas = this.initCanvas();\n        this.context = this.canvas.getContext(\"2d\");\n        this.image = this.initImage();\n        this.clearCanvas();\n        this.activeDragOpen();\n        this.activeMouseEvent();\n        this.listenResizeEvent();\n    }\n    mouseMove(x, y) {\n        let event = new MouseEvent(\"mousemove\", {\n            clientX: this.canvas.offsetLeft + this.mouseLastX + x,\n            clientY: this.canvas.offsetTop + this.mouseLastY + y,\n        });\n        this.canvas.dispatchEvent(event);\n    }\n    setFeatureListener(listener) {\n        this.featureListener = listener;\n    }\n    setScopeListener(listener) {\n        this.scopeListener = listener;\n    }\n    setGlasses(glasses) {\n        this.glasses = glasses;\n    }\n    warning(message) {\n        console.log(message);\n    }\n    saveMaxImageOffset() {\n        if (this.image.width < this.canvas.width) {\n            this.maxImageOffsetX = 0;\n        }\n        else {\n            this.maxImageOffsetX = this.image.width - this.canvas.width;\n        }\n        if (this.image.height < this.canvas.height) {\n            this.maxImageOffsetY = 0;\n        }\n        else {\n            this.maxImageOffsetY = this.image.height - this.canvas.height;\n        }\n    }\n    initImage() {\n        let img = new Image();\n        img.onload = (e) => {\n            var _a;\n            this.hasImage = true;\n            this.context.drawImage(img, 0, 0);\n            this.saveMaxImageOffset();\n            (_a = this.glasses) === null || _a === void 0 ? void 0 : _a.show(this.canvas, this.mouseLastX, this.mouseLastY, this.mouseLastX, this.mouseLastY);\n        };\n        img.onerror = (e) => {\n            this.warning(\"图片读取失败！！！\");\n        };\n        return img;\n    }\n    initCanvas() {\n        let canvas = document.getElementById(\"image_canvas\");\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n        return canvas;\n    }\n    listenResizeEvent() {\n        window.addEventListener(\"resize\", (e) => {\n            if (this.hasImage) {\n                this.canvas.width = this.canvas.clientWidth;\n                this.canvas.height = this.canvas.clientHeight;\n                this.context.drawImage(this.image, 0, 0);\n                this.saveMaxImageOffset();\n            }\n        });\n    }\n    clearCanvas() {\n        this.context.fillStyle = \"#323232\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.fillStyle = \"#000000\";\n        this.context.font = 'bold 50px sans-serif';\n        this.context.textAlign = 'center';\n        this.context.fillText('暂无图片', this.canvas.width / 2, this.canvas.height / 2);\n    }\n    activeMouseEvent() {\n        this.canvas.addEventListener(\"mouseover\", (e) => {\n            this.mouseLastX = e.offsetX;\n            this.mouseLastY = e.offsetY;\n            if (this.hasImage && this.glasses) {\n                let x = this.imageOffsetX + e.offsetX;\n                let y = this.imageOffsetY + e.offsetY;\n                this.glasses.show(this.canvas, e.offsetX, e.offsetY, x, y);\n            }\n        });\n        this.canvas.addEventListener(\"mouseout\", (e) => {\n            if (this.hasImage && this.glasses) {\n                this.glasses.conceal();\n            }\n        });\n        this.canvas.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n        this.canvas.addEventListener(\"mousedown\", (e) => {\n            if (this.hasImage) {\n                this.mouseButton = e.button;\n                this.mouseCtrl = e.ctrlKey;\n                this.mouseDownX = e.offsetX;\n                this.mouseDownY = e.offsetY;\n            }\n        });\n        this.canvas.addEventListener(\"mousemove\", (e) => {\n            var _a, _b;\n            if (this.hasImage) {\n                if (this.mouseButton === 0) {\n                    if (!this.mouseCtrl) {\n                        this.onTryScollImage(e.offsetX, e.offsetY);\n                    }\n                    else {\n                        this.onDrawScopeSelectLine(e.offsetX, e.offsetY);\n                        (_a = this.glasses) === null || _a === void 0 ? void 0 : _a.moveAndUpdate(e.offsetX, e.offsetY, this.imageOffsetX + e.offsetX, this.imageOffsetY + e.offsetY);\n                    }\n                }\n                else {\n                    (_b = this.glasses) === null || _b === void 0 ? void 0 : _b.moveAndUpdate(e.offsetX, e.offsetY, this.imageOffsetX + e.offsetX, this.imageOffsetY + e.offsetY);\n                }\n            }\n            this.mouseLastX = e.offsetX;\n            this.mouseLastY = e.offsetY;\n        });\n        this.canvas.addEventListener(\"mouseup\", (e) => {\n            if (!this.hasImage) {\n                return;\n            }\n            this.onMouseUp(e);\n        });\n    }\n    onDrawScopeSelectLine(offsetX, offsetY) {\n        this.updateCanvasImage();\n        let scope = (0, utils_1.orderScope)(this.mouseDownX, this.mouseDownY, offsetX, offsetY);\n        let width = scope[2] - scope[0];\n        let height = scope[3] - scope[1];\n        this.context.setLineDash([5]);\n        this.context.lineWidth = 2;\n        this.context.strokeStyle = \"red\";\n        this.context.strokeRect(scope[0], scope[1], width, height);\n    }\n    onTryScollImage(offsetX, offsetY) {\n        var _a, _b;\n        let shiftX = offsetX - this.mouseLastX;\n        let shiftY = offsetY - this.mouseLastY;\n        let imgX = this.imageOffsetX - shiftX;\n        let imgY = this.imageOffsetY - shiftY;\n        if (imgX < 0) {\n            imgX = 0;\n        }\n        else if (imgX > this.maxImageOffsetX) {\n            imgX = this.maxImageOffsetX;\n        }\n        if (imgY < 0) {\n            imgY = 0;\n        }\n        else if (imgY > this.maxImageOffsetY) {\n            imgY = this.maxImageOffsetY;\n        }\n        if (imgX !== this.imageOffsetX || imgY !== this.imageOffsetY) {\n            this.updateCanvasImage(imgX, imgY);\n            (_a = this.glasses) === null || _a === void 0 ? void 0 : _a.move(offsetX, offsetY);\n        }\n        else {\n            (_b = this.glasses) === null || _b === void 0 ? void 0 : _b.moveAndUpdate(offsetX, offsetY, this.imageOffsetX + offsetX, this.imageOffsetY + offsetY);\n        }\n        // console.log(`last x:${this.mouseLastX},y:${this.mouseLastY},now x:${offsetX},y:${offsetY},shift x:${shiftX},y:${shiftY},new index x:${imgX},y:${imgY}`);\n    }\n    getDrawWidth() {\n        if (this.image.width < this.canvas.width) {\n            return this.image.width;\n        }\n        return this.canvas.width;\n    }\n    getDrawHeight() {\n        if (this.image.height < this.canvas.height) {\n            return this.image.height;\n        }\n        return this.canvas.height;\n    }\n    updateCanvasImage(x, y) {\n        this.imageOffsetX = x || this.imageOffsetX;\n        this.imageOffsetY = y || this.imageOffsetY;\n        let w = this.getDrawWidth();\n        let h = this.getDrawHeight();\n        this.context.drawImage(this.image, this.imageOffsetX, this.imageOffsetY, w, h, 0, 0, w, h);\n    }\n    onMouseUp(e) {\n        if (this.mouseButton === 0) { //on left\n            if (this.mouseCtrl) { //on alt\n                if (this.mouseDownX === e.offsetX && this.mouseDownY === e.offsetY) {\n                    this.onMagnisyEvent(e); // don't move\n                }\n                else {\n                    this.onScopeEvent(e);\n                }\n            }\n            else {\n                if (this.mouseDownX === e.offsetX && this.mouseDownY === e.offsetY) {\n                    this.onFeatureSelectEvent(e); //don't move\n                }\n                else {\n                    //nothing to do;\n                }\n            }\n            this.mouseButton = -1;\n        }\n        else if (this.mouseButton == 2) {\n            if (this.mouseCtrl) {\n                if (this.mouseDownX === e.offsetX && this.mouseDownY === e.offsetY) {\n                    this.onNarrowEvent(e); //on alt+right\n                }\n            }\n            else {\n                this.updateCanvasImage();\n            }\n        }\n    }\n    onNarrowEvent(e) {\n        if (this.glasses) {\n            this.glasses.narrow(e.offsetX, e.offsetY);\n        }\n    }\n    onMagnisyEvent(e) {\n        if (this.glasses) {\n            this.glasses.magnisy(e.offsetX, e.offsetY);\n        }\n    }\n    onFeatureSelectEvent(e) {\n        if (this.featureListener) {\n            let data = (0, utils_1.getColorData)(this.context, e.offsetX, e.offsetY);\n            this.featureListener.onSelected(this.imageOffsetX + e.offsetX, this.imageOffsetY + e.offsetY, data[0], data[1], data[2]);\n        }\n    }\n    onScopeEvent(e) {\n        if (this.scopeListener) {\n            let scope = (0, utils_1.orderScope)(this.imageOffsetX + this.mouseDownX, this.imageOffsetY + this.mouseDownY, this.imageOffsetX + e.offsetX, this.imageOffsetY + e.offsetY);\n            this.scopeListener.onSelected(scope[0], scope[1], scope[2], scope[3]);\n        }\n    }\n    activeDragOpen() {\n        this.canvas.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n        });\n        this.canvas.addEventListener(\"dragleave\", (e) => {\n            e.preventDefault();\n        });\n        this.canvas.addEventListener(\"drop\", (e) => {\n            e.preventDefault();\n            if (e.dataTransfer) {\n                let files = e.dataTransfer.files;\n                if (files.length) {\n                    let url = window.URL || window.webkitURL;\n                    this.hasImage = false;\n                    this.clearCanvas();\n                    this.image.src = url.createObjectURL(files[0]);\n                    return;\n                }\n            }\n            this.warning(\"图片读取失败！！！\");\n        });\n    }\n}\nexports.ImageCanvas = ImageCanvas;\n\n\n//# sourceURL=webpack://grab_color/./src/imageCanvas.ts?");

/***/ }),

/***/ "./src/magnisyGlasses.ts":
/*!*******************************!*\
  !*** ./src/magnisyGlasses.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MagnisyGlassesImp = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nclass MagnisyGlassesImp {\n    constructor(canvas, multiple, radius) {\n        this.multiple = multiple;\n        this.radius = radius;\n        this.canvas = canvas;\n        this.initWidthHeight();\n        this.showView = document.getElementById(\"now_coord_color\");\n        this.context = canvas.getContext(\"2d\");\n    }\n    initWidthHeight() {\n        let width = (this.radius * 2 + 1) * this.multiple;\n        this.canvas.style.width = `${width}`;\n        this.canvas.style.height = `${width}`;\n        this.canvas.width = width;\n        this.canvas.height = width;\n    }\n    show(canvas, offsetX, offsetY, imageX, imageY) {\n        this.canvas.style.display = \"block\";\n        this.bigCanvas = canvas;\n        this.bigCtx = canvas.getContext(\"2d\");\n        this.updateImage(offsetX, offsetY);\n        this.showView.textContent = `${imageX},${imageY},${(0, utils_1.getColorToHexString)(this.bigCtx, offsetX, offsetY)}`;\n    }\n    updateImage(offsetX, offsetY) {\n        if (!this.bigCanvas) {\n            return;\n        }\n        if (!this.bigCtx) {\n            return;\n        }\n        this.move(offsetX, offsetY);\n        let x = offsetX - this.radius;\n        let y = offsetY - this.radius;\n        let x1 = offsetX + this.radius + 1;\n        let y1 = offsetY + this.radius + 1;\n        let originX = 0;\n        let originY = 0;\n        if (x < 0) {\n            originX = -x;\n            x = 0;\n        }\n        if (y < 0) {\n            originY = -y;\n            y = 0;\n        }\n        if (x1 > this.bigCanvas.width) {\n            x1 = this.bigCanvas.width;\n        }\n        if (y1 > this.bigCanvas.height) {\n            y1 = this.bigCanvas.height;\n        }\n        let width = x1 - x;\n        let height = y1 - y;\n        this.reset();\n        let imageData = this.bigCtx.getImageData(x, y, width, height);\n        let data = imageData.data;\n        let i = 0;\n        for (let nowy = originY; nowy < originY + height; nowy++) {\n            for (let nowx = originX; nowx < originX + width; nowx++) {\n                let r = data[i];\n                let g = data[i + 1];\n                let b = data[i + 2];\n                this.context.fillStyle = `rgb(${r},${g},${b})`;\n                this.context.fillRect(nowx * this.multiple, nowy * this.multiple, this.multiple, this.multiple);\n                i += 4;\n            }\n        }\n        this.drawCenter();\n    }\n    drawCenter() {\n        let line_width = this.multiple / 5;\n        let s = this.radius * this.multiple;\n        let grad = this.context.createLinearGradient(s, s, s + this.multiple, s + this.multiple);\n        grad.addColorStop(0, \"magenta\");\n        grad.addColorStop(0.5, \"blue\");\n        grad.addColorStop(1.0, \"red\");\n        this.context.strokeStyle = grad;\n        this.context.lineWidth = line_width;\n        this.context.strokeRect(s, s, this.multiple, this.multiple);\n    }\n    reset() {\n        this.context.fillStyle = \"#787878\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    conceal() {\n        this.bigCanvas = undefined;\n        this.canvas.style.display = \"none\";\n        this.reset();\n    }\n    narrow(offsetX, offsetY) {\n        if (this.bigCanvas) {\n            this.radius -= 1;\n            this.initWidthHeight();\n            this.updateImage(offsetX, offsetY);\n        }\n    }\n    magnisy(offsetX, offsetY) {\n        if (this.bigCanvas) {\n            this.radius += 1;\n            this.initWidthHeight();\n            this.updateImage(offsetX, offsetY);\n        }\n    }\n    moveAndUpdate(offsetX, offsetY, imageX, imageY) {\n        if (this.bigCanvas && this.bigCtx) {\n            this.updateImage(offsetX, offsetY);\n            this.showView.textContent = `${imageX},${imageY},${(0, utils_1.getColorToHexString)(this.bigCtx, offsetX, offsetY)}`;\n        }\n    }\n    move(offsetX, offsetY) {\n        if (this.bigCanvas) {\n            let shiftx = offsetX < this.bigCanvas.width / 2 ? 20 : -20 - this.canvas.width;\n            let shifty = offsetY < this.bigCanvas.height / 2 ? 20 : -20 - this.canvas.width;\n            this.canvas.style.left = `${this.bigCanvas.offsetLeft + offsetX + shiftx}px`;\n            this.canvas.style.top = `${this.bigCanvas.offsetTop + offsetY + shifty}px`;\n        }\n    }\n}\nexports.MagnisyGlassesImp = MagnisyGlassesImp;\n\n\n//# sourceURL=webpack://grab_color/./src/magnisyGlasses.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst builderFactory_1 = __webpack_require__(/*! ./builderFactory */ \"./src/builderFactory.ts\");\nconst coordColorList_1 = __webpack_require__(/*! ./coordColorList */ \"./src/coordColorList.ts\");\nconst imageCanvas_1 = __webpack_require__(/*! ./imageCanvas */ \"./src/imageCanvas.ts\");\nconst magnisyGlasses_1 = __webpack_require__(/*! ./magnisyGlasses */ \"./src/magnisyGlasses.ts\");\nconst scopeListener_1 = __webpack_require__(/*! ./scopeListener */ \"./src/scopeListener.ts\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nlet imageCanvas = new imageCanvas_1.ImageCanvas();\nlet glassCanvas = document.getElementById(\"magnify_glasses\");\nlet glasses = new magnisyGlasses_1.MagnisyGlassesImp(glassCanvas, 15, 10);\nimageCanvas.setGlasses(glasses);\nlet coordColorList = new coordColorList_1.CoordColorList();\nimageCanvas.setFeatureListener(coordColorList);\nlet scopeListener = new scopeListener_1.ScopeListener(true);\nimageCanvas.setScopeListener(scopeListener);\ndocument.onkeydown = (e) => {\n    if (e.code === \"ArrowLeft\") {\n        imageCanvas.mouseMove(-1, 0);\n    }\n    else if (e.code === \"ArrowRight\") {\n        imageCanvas.mouseMove(1, 0);\n    }\n    else if (e.code === \"ArrowUp\") {\n        imageCanvas.mouseMove(0, -1);\n    }\n    else if (e.code === \"ArrowDown\") {\n        imageCanvas.mouseMove(0, 1);\n    }\n};\nlet builderFactory = new builderFactory_1.BuilderFactory();\nbuilderFactory.addBuilder(\"AutoLua比色特征\", () => {\n    let feature = (0, utils_1.buildAutoluaCompareFeature)(coordColorList.getCoordColors());\n    (0, utils_1.setClipboard)(feature).then(() => {\n        (0, utils_1.showMessage)(`比色特征已经复制到你的剪切板`);\n    });\n});\nbuilderFactory.addBuilder(\"AutoLua一般比色\", () => {\n    let feature = (0, utils_1.buildAutoluaCompareFeature)(coordColorList.getCoordColors());\n    feature = `Display:isFeatureByShiftColorSum(\"${feature}\",76,0)`;\n    (0, utils_1.setClipboard)(feature).then(() => {\n        (0, utils_1.showMessage)(`比色特征已经复制到你的剪切板`);\n    });\n});\n\n\n//# sourceURL=webpack://grab_color/./src/main.ts?");

/***/ }),

/***/ "./src/scopeListener.ts":
/*!******************************!*\
  !*** ./src/scopeListener.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScopeListener = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\nclass ScopeListener {\n    constructor(autoCopy) {\n        this.elment = document.getElementById(\"select_scope\");\n        this.autoCopy = autoCopy;\n        this.elment.onclick = (e) => {\n            this.copy();\n        };\n    }\n    copy() {\n        (0, utils_1.setClipboard)(this.elment.textContent || \"\").then(() => {\n            (0, utils_1.showMessage)(`范围:${this.elment.textContent}已复制到你的剪切板`);\n        });\n    }\n    onSelected(x, y, x1, y1) {\n        this.elment.textContent = `${x},${y},${x1},${y1}`;\n        if (this.autoCopy) {\n            this.copy();\n        }\n    }\n}\nexports.ScopeListener = ScopeListener;\n\n\n//# sourceURL=webpack://grab_color/./src/scopeListener.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.showMessage = exports.setClipboard = exports.orderScope = exports.buildAutoluaCompareFeature = exports.getColorToHexString = exports.RGBToStyleColorString = exports.RGBTo0xHexString = exports.RGBToHexString = exports.getColorData = void 0;\nfunction getColorData(ctx, x, y) {\n    let imageData = ctx.getImageData(x, y, 1, 1);\n    return imageData.data;\n}\nexports.getColorData = getColorData;\nfunction toHexString(n) {\n    let r = n.toString(16);\n    if (r.length == 1) {\n        r = \"0\" + r;\n    }\n    return r;\n}\nfunction RGBToHexString(r, g, b) {\n    return `${toHexString(r)}${toHexString(g)}${toHexString(b)}`.toUpperCase();\n}\nexports.RGBToHexString = RGBToHexString;\nfunction RGBTo0xHexString(r, g, b) {\n    return \"0x\" + (`${toHexString(r)}${toHexString(g)}${toHexString(b)}`.toUpperCase());\n}\nexports.RGBTo0xHexString = RGBTo0xHexString;\nfunction RGBToStyleColorString(r, g, b) {\n    return `#${toHexString(r)}${toHexString(g)}${toHexString(b)}`;\n}\nexports.RGBToStyleColorString = RGBToStyleColorString;\nfunction getColorToHexString(ctx, x, y) {\n    let data = getColorData(ctx, x, y);\n    return RGBTo0xHexString(data[0], data[1], data[2]);\n}\nexports.getColorToHexString = getColorToHexString;\nfunction buildAutoluaCompareFeature(list) {\n    let arr = Array();\n    for (let index = 0; index < list.length; index++) {\n        const element = list[index];\n        let color = RGBToHexString(element.r, element.g, element.b);\n        arr.push(`${element.x}|${element.y}|${color}`);\n    }\n    return arr.join(\",\");\n}\nexports.buildAutoluaCompareFeature = buildAutoluaCompareFeature;\nfunction orderScope(x, y, x1, y1) {\n    if (x > x1) {\n        let local = x;\n        x = x1;\n        x1 = local;\n    }\n    if (y > y1) {\n        let local = y;\n        y = y1;\n        y1 = local;\n    }\n    return [x, y, x1, y1];\n}\nexports.orderScope = orderScope;\nfunction setClipboard(text) {\n    try {\n        return navigator.clipboard.writeText(text);\n    }\n    catch (err) {\n        return new Promise(() => { });\n    }\n}\nexports.setClipboard = setClipboard;\nfunction showMessage(message, time) {\n    var _a;\n    let e = document.createElement(\"div\");\n    e.style.position = \"fixed\";\n    e.style.zIndex = \"1000\";\n    e.style.top = \"10px\";\n    e.style.height = \"40px\";\n    e.style.textAlign = \"center\";\n    e.style.lineHeight = \"40px\";\n    e.textContent = message;\n    e.style.color = \"#000000\";\n    e.style.backgroundColor = \"#ffffff\";\n    e.style.fontWeight = \"bolder\";\n    (_a = document.getElementById(\"body\")) === null || _a === void 0 ? void 0 : _a.appendChild(e);\n    if (e.clientWidth < window.innerWidth) {\n        e.style.left = `${(window.innerWidth - e.clientWidth) / 2}px`;\n    }\n    setTimeout(() => {\n        var _a;\n        (_a = document.getElementById(\"body\")) === null || _a === void 0 ? void 0 : _a.removeChild(e);\n    }, time || 1500);\n}\nexports.showMessage = showMessage;\n\n\n//# sourceURL=webpack://grab_color/./src/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;